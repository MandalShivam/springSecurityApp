spring.application.name=springSecurityApp

# we have added spring security dependency So by default spring security is enabled for us

#By default, when you only add the spring-boot-starter-security dependency in Spring Boot,
#  Spring Security activates its in-memory authentication with a pre-configured user.

#Username: The default username is "user".
#Password: The default password is a randomly generated string.
# like - Using generated security password: 8f603eee-50b4-4dfc-9932-59786a0eb970

# we can add username and password to access api like below
# so we have to add username and password to access apis
# Approach 1 - for single user (not recomended)

#spring.security.user.name=Basant
#spring.security.user.password=PWd1

# but this approach is for quick testing we can't hardcode username and password for multiple user
# what if there is multiple user of different roles
# how to confure security for that case ?

# Apprach 2 :-  multiple user of different roles
# for that you need to create config class and you need to define user detail service
# Using UserDetailService class we have implemented authentication
# for authorication we have used SecurityFilterChain - In this we ensured users are authorized to that api or not

# Next we have used mehtod level authorization in which we ensured which mehtod is authorized for which user
# here we used @EnableMethodSecurity at class level of controller class and @PreAuthorize('hasAthority('ROLE_ADMIN')')
# at method level and mentioned role of users ,  which user has accesss to this api


# go to securityConfig

#---------------------------
spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/javatechie
spring.datasource.username=root
spring.datasource.password=Root@
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming

